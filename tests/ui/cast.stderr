error: casting `i32` to `f32` causes a loss of precision (`i32` is 32 bits wide, but `f32`'s mantissa is only 23 bits wide)
  --> tests/ui/cast.rs:23:5
   |
LL |     x0 as f32;
   |     ^^^^^^^^^
   |
   = note: `-D clippy::cast-precision-loss` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::cast_precision_loss)]`

error: casting `i64` to `f32` causes a loss of precision (`i64` is 64 bits wide, but `f32`'s mantissa is only 23 bits wide)
  --> tests/ui/cast.rs:27:5
   |
LL |     x1 as f32;
   |     ^^^^^^^^^

error: casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> tests/ui/cast.rs:30:5
   |
LL |     x1 as f64;
   |     ^^^^^^^^^

error: casting `u32` to `f32` causes a loss of precision (`u32` is 32 bits wide, but `f32`'s mantissa is only 23 bits wide)
  --> tests/ui/cast.rs:34:5
   |
LL |     x2 as f32;
   |     ^^^^^^^^^

error: casting `u64` to `f32` causes a loss of precision (`u64` is 64 bits wide, but `f32`'s mantissa is only 23 bits wide)
  --> tests/ui/cast.rs:38:5
   |
LL |     x3 as f32;
   |     ^^^^^^^^^

error: casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)
  --> tests/ui/cast.rs:41:5
   |
LL |     x3 as f64;
   |     ^^^^^^^^^

error: casting `f32` to `i32` may truncate the value
  --> tests/ui/cast.rs:45:5
   |
LL |     1f32 as i32;
   |     ^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = note: `-D clippy::cast-possible-truncation` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::cast_possible_truncation)]`

error: casting `f32` to `u32` may truncate the value
  --> tests/ui/cast.rs:48:5
   |
LL |     1f32 as u32;
   |     ^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...

error: casting `f32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:48:5
   |
LL |     1f32 as u32;
   |     ^^^^^^^^^^^
   |
   = note: `-D clippy::cast-sign-loss` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::cast_sign_loss)]`

error: casting `f64` to `f32` may truncate the value
  --> tests/ui/cast.rs:52:5
   |
LL |     1f64 as f32;
   |     ^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...

error: casting `i32` to `i8` may truncate the value
  --> tests/ui/cast.rs:55:5
   |
LL |     1i32 as i8;
   |     ^^^^^^^^^^
   |
   = note: the cast operant may assume the value `1`
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -     1i32 as i8;
LL +     i8::try_from(1i32);
   |

error: casting `i32` to `u8` may truncate the value
  --> tests/ui/cast.rs:58:5
   |
LL |     1i32 as u8;
   |     ^^^^^^^^^^
   |
   = note: the cast operant may assume the value `1`
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -     1i32 as u8;
LL +     u8::try_from(1i32);
   |

error: casting `f64` to `isize` may truncate the value
  --> tests/ui/cast.rs:61:5
   |
LL |     1f64 as isize;
   |     ^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...

error: casting `f64` to `usize` may truncate the value
  --> tests/ui/cast.rs:64:5
   |
LL |     1f64 as usize;
   |     ^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...

error: casting `f64` to `usize` may lose the sign of the value
  --> tests/ui/cast.rs:64:5
   |
LL |     1f64 as usize;
   |     ^^^^^^^^^^^^^

error: casting `u32` to `u16` may truncate the value
  --> tests/ui/cast.rs:68:5
   |
LL |     1f32 as u32 as u16;
   |     ^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `0..=4294967295`
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -     1f32 as u32 as u16;
LL +     u16::try_from(1f32 as u32);
   |

error: casting `f32` to `u32` may truncate the value
  --> tests/ui/cast.rs:68:5
   |
LL |     1f32 as u32 as u16;
   |     ^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...

error: casting `f32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:68:5
   |
LL |     1f32 as u32 as u16;
   |     ^^^^^^^^^^^

error: casting `i32` to `i8` may truncate the value
  --> tests/ui/cast.rs:74:22
   |
LL |         let _x: i8 = 1i32 as _;
   |                      ^^^^^^^^^
   |
   = note: the cast operant may assume the value `1`
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -         let _x: i8 = 1i32 as _;
LL +         let _x: i8 = 1i32.try_into();
   |

error: casting `f32` to `i32` may truncate the value
  --> tests/ui/cast.rs:77:9
   |
LL |         1f32 as i32;
   |         ^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...

error: casting `f64` to `i32` may truncate the value
  --> tests/ui/cast.rs:80:9
   |
LL |         1f64 as i32;
   |         ^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...

error: casting `f32` to `u8` may truncate the value
  --> tests/ui/cast.rs:83:9
   |
LL |         1f32 as u8;
   |         ^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...

error: casting `f32` to `u8` may lose the sign of the value
  --> tests/ui/cast.rs:83:9
   |
LL |         1f32 as u8;
   |         ^^^^^^^^^^

error: casting `u8` to `i8` may wrap around the value
  --> tests/ui/cast.rs:88:5
   |
LL |     1u8 as i8;
   |     ^^^^^^^^^
   |
   = note: the cast operant may assume the value `1`
   = note: `-D clippy::cast-possible-wrap` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::cast_possible_wrap)]`

error: casting `u16` to `i16` may wrap around the value
  --> tests/ui/cast.rs:91:5
   |
LL |     1u16 as i16;
   |     ^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `1`

error: casting `u32` to `i32` may wrap around the value
  --> tests/ui/cast.rs:94:5
   |
LL |     1u32 as i32;
   |     ^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `1`

error: casting `u64` to `i64` may wrap around the value
  --> tests/ui/cast.rs:97:5
   |
LL |     1u64 as i64;
   |     ^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `1`

error: casting `usize` to `isize` may wrap around the value
  --> tests/ui/cast.rs:100:5
   |
LL |     1usize as isize;
   |     ^^^^^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `1`

error: casting `usize` to `i8` may truncate the value
  --> tests/ui/cast.rs:104:5
   |
LL |     1usize as i8;
   |     ^^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `1`
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -     1usize as i8;
LL +     i8::try_from(1usize);
   |

error: casting `usize` to `i16` may truncate the value
  --> tests/ui/cast.rs:108:5
   |
LL |     1usize as i16;
   |     ^^^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `1`
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -     1usize as i16;
LL +     i16::try_from(1usize);
   |

error: casting `usize` to `i16` may wrap around the value on targets with 16-bit wide pointers
  --> tests/ui/cast.rs:108:5
   |
LL |     1usize as i16;
   |     ^^^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `1`
   = note: `usize` and `isize` may be as small as 16 bits on some platforms
   = note: for more information see https://doc.rust-lang.org/reference/types/numeric.html#machine-dependent-integer-types

error: casting `usize` to `i32` may truncate the value on targets with 64-bit wide pointers
  --> tests/ui/cast.rs:113:5
   |
LL |     1usize as i32;
   |     ^^^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `1`
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -     1usize as i32;
LL +     i32::try_from(1usize);
   |

error: casting `usize` to `i32` may wrap around the value on targets with 32-bit wide pointers
  --> tests/ui/cast.rs:113:5
   |
LL |     1usize as i32;
   |     ^^^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `1`

error: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
  --> tests/ui/cast.rs:118:5
   |
LL |     1usize as i64;
   |     ^^^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `1`

error: casting `u16` to `isize` may wrap around the value on targets with 16-bit wide pointers
  --> tests/ui/cast.rs:124:5
   |
LL |     1u16 as isize;
   |     ^^^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `1`
   = note: `usize` and `isize` may be as small as 16 bits on some platforms
   = note: for more information see https://doc.rust-lang.org/reference/types/numeric.html#machine-dependent-integer-types

error: casting `u32` to `isize` may wrap around the value on targets with 32-bit wide pointers
  --> tests/ui/cast.rs:128:5
   |
LL |     1u32 as isize;
   |     ^^^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `1`

error: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
  --> tests/ui/cast.rs:132:5
   |
LL |     1u64 as isize;
   |     ^^^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `1`
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -     1u64 as isize;
LL +     isize::try_from(1u64);
   |

error: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
  --> tests/ui/cast.rs:132:5
   |
LL |     1u64 as isize;
   |     ^^^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `1`

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:138:5
   |
LL |     -1i32 as u32;
   |     ^^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `-1`

error: casting `isize` to `usize` may lose the sign of the value
  --> tests/ui/cast.rs:142:5
   |
LL |     -1isize as usize;
   |     ^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `-1`

error: casting `i8` to `u8` may lose the sign of the value
  --> tests/ui/cast.rs:154:5
   |
LL |     (i8::MIN).abs() as u8;
   |     ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `-128`

error: casting `i64` to `u64` may lose the sign of the value
  --> tests/ui/cast.rs:159:5
   |
LL |     (-1i64).abs() as u64;
   |     ^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `1`

error: casting `isize` to `usize` may lose the sign of the value
  --> tests/ui/cast.rs:161:5
   |
LL |     (-1isize).abs() as usize;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `1`

error: casting `i64` to `u64` may lose the sign of the value
  --> tests/ui/cast.rs:169:5
   |
LL |     (unsafe { (-1i64).checked_abs().unwrap_unchecked() }) as u64;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `1`

error: casting `i64` to `u64` may lose the sign of the value
  --> tests/ui/cast.rs:185:5
   |
LL |     (unsafe { (-1i64).checked_isqrt().unwrap_unchecked() }) as u64;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `<empty>`

error: casting `i64` to `i8` may truncate the value
  --> tests/ui/cast.rs:237:5
   |
LL |     (-99999999999i64).min(1) as i8;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `-99999999999`
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -     (-99999999999i64).min(1) as i8;
LL +     i8::try_from((-99999999999i64).min(1));
   |

error: casting `u64` to `u8` may truncate the value
  --> tests/ui/cast.rs:251:5
   |
LL |     999999u64.clamp(0, 256) as u8;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `256`
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -     999999u64.clamp(0, 256) as u8;
LL +     u8::try_from(999999u64.clamp(0, 256));
   |

error: casting `main::E2` to `u8` may truncate the value
  --> tests/ui/cast.rs:274:21
   |
LL |             let _ = self as u8;
   |                     ^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -             let _ = self as u8;
LL +             let _ = u8::try_from(self);
   |

error: casting `main::E2::B` to `u8` will truncate the value
  --> tests/ui/cast.rs:277:21
   |
LL |             let _ = Self::B as u8;
   |                     ^^^^^^^^^^^^^
   |
   = note: `-D clippy::cast-enum-truncation` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::cast_enum_truncation)]`

error: casting `main::E5` to `i8` may truncate the value
  --> tests/ui/cast.rs:319:21
   |
LL |             let _ = self as i8;
   |                     ^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -             let _ = self as i8;
LL +             let _ = i8::try_from(self);
   |

error: casting `main::E5::A` to `i8` will truncate the value
  --> tests/ui/cast.rs:322:21
   |
LL |             let _ = Self::A as i8;
   |                     ^^^^^^^^^^^^^

error: casting `main::E6` to `i16` may truncate the value
  --> tests/ui/cast.rs:340:21
   |
LL |             let _ = self as i16;
   |                     ^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -             let _ = self as i16;
LL +             let _ = i16::try_from(self);
   |

error: casting `main::E7` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> tests/ui/cast.rs:360:21
   |
LL |             let _ = self as usize;
   |                     ^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -             let _ = self as usize;
LL +             let _ = usize::try_from(self);
   |

error: casting `main::E10` to `u16` may truncate the value
  --> tests/ui/cast.rs:408:21
   |
LL |             let _ = self as u16;
   |                     ^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -             let _ = self as u16;
LL +             let _ = u16::try_from(self);
   |

error: casting `u32` to `u8` may truncate the value
  --> tests/ui/cast.rs:420:13
   |
LL |     let c = (q >> 16) as u8;
   |             ^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `0..=65535`
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -     let c = (q >> 16) as u8;
LL +     let c = u8::try_from(q >> 16);
   |

error: casting `u32` to `u8` may truncate the value
  --> tests/ui/cast.rs:425:13
   |
LL |     let c = (q / 1000) as u8;
   |             ^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `0..=4294967`
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -     let c = (q / 1000) as u8;
LL +     let c = u8::try_from(q / 1000);
   |

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:438:9
   |
LL |         (x * x) as u32;
   |         ^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `-1073709056..=1073741824`

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:444:32
   |
LL |     let _a = |x: i32| -> u32 { (x * x * x * x) as u32 };
   |                                ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `-2147483648..=2147483647`

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:447:5
   |
LL |     (2_i32).checked_pow(3).unwrap() as u32;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `8`

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:449:5
   |
LL |     (-2_i32).pow(3) as u32;
   |     ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `-8`

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:454:5
   |
LL |     (-5_i32 % 2) as u32;
   |     ^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `-1`

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:457:5
   |
LL |     (-5_i32 % -2) as u32;
   |     ^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `-1`

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:461:5
   |
LL |     (-2_i32 >> 1) as u32;
   |     ^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `-1`

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:465:5
   |
LL |     (x * x) as u32;
   |     ^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `-2147483648..=2147483647`

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:467:5
   |
LL |     (x * x * x) as u32;
   |     ^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `-2147483648..=2147483647`

error: casting `i16` to `u16` may lose the sign of the value
  --> tests/ui/cast.rs:471:5
   |
LL |     (y * y * y * y * -2) as u16;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `-32768..=32767`

error: casting `i16` to `u16` may lose the sign of the value
  --> tests/ui/cast.rs:474:5
   |
LL |     (y * y * y / y * 2) as u16;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `-32768..=32767`

error: casting `i16` to `u16` may lose the sign of the value
  --> tests/ui/cast.rs:476:5
   |
LL |     (y * y / y * 2) as u16;
   |     ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `-32768..=32767`

error: casting `i16` to `u16` may lose the sign of the value
  --> tests/ui/cast.rs:479:5
   |
LL |     (y / y * y * -2) as u16;
   |     ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `-32768..=32767`

error: equal expressions as operands to `/`
  --> tests/ui/cast.rs:479:6
   |
LL |     (y / y * y * -2) as u16;
   |      ^^^^^
   |
   = note: `#[deny(clippy::eq_op)]` on by default

error: casting `i16` to `u16` may lose the sign of the value
  --> tests/ui/cast.rs:483:5
   |
LL |     (y + y + y + -2) as u16;
   |     ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `-32768..=32767`

error: casting `i16` to `u16` may lose the sign of the value
  --> tests/ui/cast.rs:486:5
   |
LL |     (y + y + y + 2) as u16;
   |     ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `-32768..=32767`

error: casting `i16` to `u16` may lose the sign of the value
  --> tests/ui/cast.rs:490:5
   |
LL |     (z + -2) as u16;
   |     ^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `-32768..=32767`

error: casting `i16` to `u16` may lose the sign of the value
  --> tests/ui/cast.rs:493:5
   |
LL |     (z + z + 2) as u16;
   |     ^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `-32768..=32767`

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:497:9
   |
LL |         (a * a * b * b * c * c) as u32;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `-2147483648..=2147483647`

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:499:9
   |
LL |         (a * b * c) as u32;
   |         ^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `-2147483648..=2147483647`

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:502:9
   |
LL |         (a * -b * c) as u32;
   |         ^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `-2147483648..=2147483647`

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:505:9
   |
LL |         (a * b * c * c) as u32;
   |         ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `-2147483648..=2147483647`

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:507:9
   |
LL |         (a * -2) as u32;
   |         ^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `-2147483648..=2147483647`

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:510:9
   |
LL |         (a * b * c * -2) as u32;
   |         ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `-2147483648..=2147483647`

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:513:9
   |
LL |         (a / b) as u32;
   |         ^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `-2147483648..=2147483647`

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:515:9
   |
LL |         (a / b * c) as u32;
   |         ^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `-2147483648..=2147483647`

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:518:9
   |
LL |         (a / b + b * c) as u32;
   |         ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `-2147483648..=2147483647`

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:521:9
   |
LL |         a.saturating_pow(3) as u32;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `-2147483648..=2147483647`

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:524:9
   |
LL |         (a.abs() * b.pow(2) / c.abs()) as u32
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `-2147483648..=2147483647`

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:532:21
   |
LL |             let _ = i32::MIN as u32; // cast_sign_loss
   |                     ^^^^^^^^^^^^^^^
...
LL |     m!();
   |     ---- in this macro invocation
   |
   = note: the cast operant may assume the value `-2147483648`
   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)

error: casting `u32` to `u8` may truncate the value
  --> tests/ui/cast.rs:535:21
   |
LL |             let _ = u32::MAX as u8; // cast_possible_truncation
   |                     ^^^^^^^^^^^^^^
...
LL |     m!();
   |     ---- in this macro invocation
   |
   = note: the cast operant may assume the value `4294967295`
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)
help: ... or use `try_from` and handle the error accordingly
   |
LL -             let _ = u32::MAX as u8; // cast_possible_truncation
LL +             let _ = u8::try_from(u32::MAX); // cast_possible_truncation
   |

error: casting `f64` to `f32` may truncate the value
  --> tests/ui/cast.rs:538:21
   |
LL |             let _ = std::f64::consts::PI as f32; // cast_possible_truncation
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
LL |     m!();
   |     ---- in this macro invocation
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)

error: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> tests/ui/cast.rs:549:5
   |
LL |     bar.unwrap().unwrap() as usize
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `-9223372036854775808..=9223372036854775807`
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -     bar.unwrap().unwrap() as usize
LL +     usize::try_from(bar.unwrap().unwrap())
   |

error: casting `i64` to `usize` may lose the sign of the value
  --> tests/ui/cast.rs:549:5
   |
LL |     bar.unwrap().unwrap() as usize
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `-9223372036854775808..=9223372036854775807`

error: casting `u64` to `u8` may truncate the value
  --> tests/ui/cast.rs:566:5
   |
LL |     (256 & 999999u64) as u8;
   |     ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `0`
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -     (256 & 999999u64) as u8;
LL +     u8::try_from(256 & 999999u64);
   |

error: casting `u64` to `u8` may truncate the value
  --> tests/ui/cast.rs:569:5
   |
LL |     (255 % 999999u64) as u8;
   |     ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may assume the value `255`
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -     (255 % 999999u64) as u8;
LL +     u8::try_from(255 % 999999u64);
   |

error: casting `u64` to `u32` may truncate the value
  --> tests/ui/cast.rs:580:5
   |
LL |     result as u32
   |     ^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `0..=4294967294`
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -     result as u32
LL +     u32::try_from(result)
   |

error: casting `u16` to `i16` may wrap around the value
  --> tests/ui/cast.rs:587:13
   |
LL |     let x = x as i16 - 0x180;
   |             ^^^^^^^^
   |
   = note: the cast operant may contain values in the range `0..=65535`

error: casting `i16` to `u16` may lose the sign of the value
  --> tests/ui/cast.rs:590:13
   |
LL |     let x = x.clamp(0, 510) as u16;
   |             ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `0..=510`

error: casting `u16` to `u8` may truncate the value
  --> tests/ui/cast.rs:593:5
   |
LL |     ((x + 1) >> 1) as u8
   |     ^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `0..=255`
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -     ((x + 1) >> 1) as u8
LL +     u8::try_from((x + 1) >> 1)
   |

error: casting `u16` to `i16` may wrap around the value
  --> tests/ui/cast.rs:599:13
   |
LL |     let x = x as i16 - 0x180;
   |             ^^^^^^^^
   |
   = note: the cast operant may contain values in the range `0..=65535`

error: casting `i16` to `u16` may lose the sign of the value
  --> tests/ui/cast.rs:602:13
   |
LL |     let x = x.clamp(0, 510) as u16;
   |             ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `0..=510`

error: casting `u32` to `u8` may truncate the value
  --> tests/ui/cast.rs:608:5
   |
LL |     ((x as u32 * 255 + 32895) >> 16) as u8
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `0..=255`
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -     ((x as u32 * 255 + 32895) >> 16) as u8
LL +     u8::try_from((x as u32 * 255 + 32895) >> 16)
   |

error: casting `u32` to `u16` may truncate the value
  --> tests/ui/cast.rs:629:16
   |
LL |         return ((sign >> 16) | 0x7C00u32 | nan_bit | (man >> 13)) as u16;
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `0..=65535`
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -         return ((sign >> 16) | 0x7C00u32 | nan_bit | (man >> 13)) as u16;
LL +         return u16::try_from((sign >> 16) | 0x7C00u32 | nan_bit | (man >> 13));
   |

error: casting `u32` to `i32` may wrap around the value
  --> tests/ui/cast.rs:636:24
   |
LL |     let unbiased_exp = ((exp >> 23) as i32) - 127;
   |                        ^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `0..=255`

error: casting `u32` to `u16` may truncate the value
  --> tests/ui/cast.rs:642:16
   |
LL |         return (half_sign | 0x7C00u32) as u16;
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `31744..=65535`
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -         return (half_sign | 0x7C00u32) as u16;
LL +         return u16::try_from(half_sign | 0x7C00u32);
   |

error: casting `u32` to `u16` may truncate the value
  --> tests/ui/cast.rs:662:16
   |
LL |         return (half_sign | half_man) as u16;
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `0..=4294967295`
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -         return (half_sign | half_man) as u16;
LL +         return u16::try_from(half_sign | half_man);
   |

error: casting `i32` to `u32` may lose the sign of the value
  --> tests/ui/cast.rs:667:20
   |
LL |     let half_exp = (half_exp as u32) << 10;
   |                    ^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `-112..=143`

error: casting `u32` to `u16` may truncate the value
  --> tests/ui/cast.rs:674:9
   |
LL |         ((half_sign | half_exp | half_man) + 1) as u16
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `0..=4294967295`
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -         ((half_sign | half_exp | half_man) + 1) as u16
LL +         u16::try_from((half_sign | half_exp | half_man) + 1)
   |

error: casting `u32` to `u16` may truncate the value
  --> tests/ui/cast.rs:677:9
   |
LL |         (half_sign | half_exp | half_man) as u16
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: the cast operant may contain values in the range `0..=4294967295`
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
help: ... or use `try_from` and handle the error accordingly
   |
LL -         (half_sign | half_exp | half_man) as u16
LL +         u16::try_from(half_sign | half_exp | half_man)
   |

error: aborting due to 106 previous errors

